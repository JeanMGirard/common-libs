---
version: '3'

env:
  RELEASE_ANSIBLE:
    sh: |
      if [ '{{.REPOSITORY_TYPE}}' == 'ansible' ] && [ '{{.REPOSITORY_SUBTYPE}}' == 'role' ]; then
        echo 'release'
      fi
  RELEASE_DOCKER:
    sh: |
      if [ -f Dockerfile ] && ([ '{{.REPOSITORY_TYPE}}' == 'docker' ] || [ "$(jq -r '.blueprint.dockerPublish' package.json)" == 'true' ]); then
        echo 'release'
      fi
  RELEASE_GO:
    sh: |
      if [ '{{.REPOSITORY_TYPE}}' == 'go' ] && [ '{{.REPOSITORY_SUBTYPE}}' == 'cli' ]; then
        echo 'release'
      fi
  RELEASE_NPM:
    sh: |
      if [ '{{.REPOSITORY_TYPE}}' == 'npm' ] || [ "$(jq -r '.blueprint.npmPublish' package.json)" == 'true' ]; then
        echo 'release'
      fi
  RELEASE_PACKER:
    sh: |
      if [ '{{.REPOSITORY_TYPE}}' == 'packer' ]; then
        echo 'release'
      fi
  RELEASE_PYTHON:
    sh: |
      if [ '{{.REPOSITORY_TYPE}}' == 'python' ] || [ "$(jq -r '.blueprint.pythonPublish' package.json)" == 'true' ]; then
        echo 'release'
      fi
  SNAP_PACKAGE:
    sh: jq -r '.blueprint.snapPackage' package.json

tasks:

  md:
    cmds:
      - task: md:introduction
      - task: md:project-specific
  md:ansible:
    vars:
      PKG_NAME:
        sh: |
          if [ -n "$RELEASE_ANSIBLE" ]; then
            echo "{{.GALAXY_NAMESPACE}}.{{.GALAXY_ROLE_NAME}}"
          fi
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - echo -e '```shell\nansible-galaxy install {{.PKG_NAME}},v{{.VERSION}}\n```\n'
    status:
      - '[ -z "$RELEASE_ANSIBLE" ]'
  md:docker:
    vars:
      IMAGE:
        sh: |
          if [ -n "$RELEASE_DOCKER" ]; then
            echo "{{.DOCKERHUB_PROFILE}}/$(jq -r '.blueprint.slug' package.json)"
          fi
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - echo -e '```shell\ndocker pull {{.IMAGE}}:{{.VERSION}}\n```\n'
    status:
      - '[ -z "$RELEASE_DOCKER" ]'
  md:go:
    vars:
      GITHUB_GO_URL:
        sh: jq -r '.blueprint.repository.github' package.json | sed 's/https:\/\///'
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - echo -e '```shell\ngo install {{.GITHUB_GO_URL}}@v{{.VERSION}}\n```\n'
    status:
      - '[ -z "$RELEASE_GO" ]'
  md:introduction:
    cmds:
      - echo -e 'Grab this version by running:\n\n'
  md:npm:
    vars:
      FLAG:
        sh: |
          if [ '{{.REPOSITORY_SUBTYPE}}' == 'cli' ]; then
            echo ' -g'
          elif [ '{{.REPOSITORY_SUBTYPE}}' == 'config' ] || [ '{{.REPOSITORY_SUBTYPE}}' == 'plugin' ]; then
            echo ' --save-dev'
          else
            echo ' --save'
          fi
      PKG_NAME:
        sh: jq -r '.name' package.json
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - echo -e '```shell\nnpm i{{.FLAG}} {{.PKG_NAME}}@{{.VERSION}}\n```\n'
    status:
      - '[ -z "$RELEASE_NPM" ]'
  md:packer:
    vars:
      VAGRANTUP_BOX:
        sh: |
          if [ -n "$RELEASE_PACKER" ]; then
            BASENAME="$(jq -r '.variables.box_basename' template.json)"
            VAGRANTUP_USER="$(jq -r '.variables.vagrantup_user' template.json)"
            if [ "$BASENAME" != 'null' ] && [ "$BASENAME" != 'null' ]; then
              echo "$VAGRANTUP_USER/$BASENAME"
            fi
          fi
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - echo -e '```shell\nvagrant init --box-version '{{.VERSION}}' {{.VAGRANTUP_BOX}} && vagrant up\n```\n'
    status:
      - '[ -z "$RELEASE_PACKER" ]'
  md:project-specific:
    deps:
      - md:ansible
      - md:docker
      - md:go
      - md:npm
      - md:packer
      - md:python
  md:python:
    vars:
      PKG_NAME:
        sh: |
          if [ -n "$RELEASE_PYTHON" ]; then
            PKG_NAME="$(jq -r '.blueprint.customPyPiPackageName' package.json)"
            if [ "$PKG_NAME" == 'null' ]; then
              PKG_NAME="$(jq -r '.blueprint.customPackageName' package.json)"
            fi
            if [ "$PKG_NAME" == 'null' ]; then
              PKG_NAME="$(jq -r '.name' package.json)"
            fi
            echo "$PKG_NAME"
          fi
      VERSION:
        sh: jq -r '.version' package.json
    cmds:
      - echo -e '```shell\npip3 install {{.PKG_NAME}}=={{.VERSION}}\n```\n'
    status:
      - '[ -z "$RELEASE_PYTHON" ]'

