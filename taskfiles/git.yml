---
version: '3'

vars:
  EMOJI_END:
    sh: |
      if [ -f '.variables.json' ] && type jq &> /dev/null; then
        BP_END="$(jq -r '.emoji_end' .variables.json)"
        if [ "$BP_END" != 'null' ]; then
          echo "$BP_END"
        else
          if [ "$(jq -r '.emoji_endings[15]' .variables.json)" != 'null' ]; then
            echo "$(jq --arg place "$(shuf -i 0-15 -n 1)" -r '.emoji_endings[($place | tonumber)]' .variables.json)"
          else
            echo ""
          fi
        fi
      fi
  EMOJI_START:
    sh: |
      if [ -f '.variables.json' ] && type jq &> /dev/null; then
        BP_START="$(jq -r '.emoji_start' .variables.json)"
        if [ "$BP_START" != 'null' ]; then
          echo "$BP_START"
        else
          if [ "$(jq -r '.emoji_beginnings[15]' .variables.json)" != 'null' ]; then
            echo "$(jq --arg place "$(shuf -i 0-15 -n 1)" -r '.emoji_beginnings[($place | tonumber)]' .variables.json)"
          else
            echo ""
          fi
        fi
      fi
  GITHUB_ISSUES: true
  GITHUB_WIKI: false
  GITLAB_WIKI: false
  GIT_NOTIFY_COLOR: '#0450ec'
  REPOSITORY_LIST: .cache/repository-list.txt

env:
  CLICOLOR:
    sh: if [[ "${container:=}" == 'docker' ]]; then echo "0"; else echo "1"; fi

tasks:
  git:reset:
    cmds:
      - task: clean
      - task: update
  git:reset:force:
    deps:
      - software:git
    log:
      error: Failed to reset project back to its HEAD
      start: Forcing project to reset aggressively
      success: Successfully reset project back to its HEAD
    cmds:
      - task: clean
      - git reset --hard HEAD
      - git clean -fxd :/
      - git checkout master
      - git pull origin master --no-rebase
  git:commit:automated:
    deps:
      - remotes
    log:
      start: Running automated commit
    cmds:
      - task --list > /dev/null || (echo "ERROR > Invalid Taskfile(s)!" && exit 1)
      - git add --all
      - cmd: >
          HUSKY=0 git commit -m "☁️ chore(automation): Automated update" -n
        ignore_error: true
    status:
      - '[ "$FULLY_AUTOMATED_TASKS" != "true" ] || [ "$SEMANTIC_RELEASE" == "true" ]'
  git:convert:folder:submodule:
    deps:
      - :git:github:update
      - :git:gitlab:update
    vars:
      BASENAME:
        sh: basename "$PWD"
      GITLAB_REPO:
        sh: jq -r '.blueprint.repository.gitlab' package.json
    log:
      error: Error converting `{{.BASENAME}}` to a submodule
      start: Converting `{{.BASENAME}}` directory into a submodule
      success: Converted the `{{.BASENAME}}` directory to a submodule
    cmds:
      - git init
      - git remote add origin "{{.GITLAB_REPO}}"
      - git add --all
      - git commit --quiet -m "🧐 refactor(submodule): Adding folder/project to its own git repository."
      - git push --quiet -u --no-progress origin master
      - cd .. && rm -rf {{.BASENAME}}
      - cd .. && git add {{.BASENAME}}
      - cd .. && git commit --quiet -m "🧐 refactor(submodule): Removing folder which will now be a submodule."
      - cd .. && git submodule add -b master "{{.GITLAB_REPO}}" {{.BASENAME}}
      - cd .. && git add {{.BASENAME}}
      - cd .. && git commit --quiet -m "🧐 refactor(submodule): Adding new submodule which was previously a directory."
      - cd .. && git push --quiet -u --no-progress origin HEAD
    preconditions:
      - sh: '[[ ! $(git rev-parse --git-dir) =~ ".git/modules" ]]'
        msg: Cannot convert the directory to a submodule - the directory already appears to be a submodule.
  git:convert:folder:subrepo:
    deps:
      - :install:software:subrepo
    vars:
      BASENAME:
        sh: basename "$PWD"
      GITLAB_REPO:
        sh: jq -r '.blueprint.repository.gitlab' package.json
    log:
      error: Error encountered while converting `{{.BASENAME}}` into a sub-repo
      start: Converting `{{.BASENAME}}` into a sub-repo
      success: Converted `{{.BASENAME}}` into a sub-repo
    cmds:
      - rm -rf .git
      - |
        ROLE_DIR="$PWD"
        while ! test -d .git; do cd ..; done
        git remote add {{.BASENAME}} {{.GITLAB_REPO}}
        RELATIVE_DIR="$(echo $ROLE_DIR | sed 's@'"$PWD"'/@@')"
        HUSKY=0 git subrepo clone {{.BASENAME}} "$RELATIVE_DIR" -b master

  git:filter:
    log:
      error: Error filtering git history
      start: Filtering unnecessary items from git history
      success: Successfully filtered unnecessary items from git history
    cmds:
      - git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch -r **/node_modules/' --prune-empty -- --all
  git:push:all:
    deps:
      - :ci:commit:config
      - :git:github:create
      - :git:gitlab:create
    log:
      error: Encountered error while running `git push all master --force || git push origin master`
      start: Running `git push all master --force || git push origin master`
      success: Successfully ran `git push all master --force || git push origin master`
    cmds:
      - |
        if ! git push all master --force; then
          git pull -X theirs origin master
          git add --all
          HUSKY=0 git commit -m "☁️ chore(automation): Automated update to all remotes" -n
          if ! git push all master --force; then
            task git:gitlab:protected:off -- "master"
            git push all master --force
            task git:gitlab:protected:on -- "master"
          fi
        fi
    status:
      - '[ -n "$CI" ] || [ "$SEMANTIC_RELEASE" == "true" ] || [ "$FULLY_AUTOMATED_TASKS" != "true" ]'
  git:remotes:
    deps:
      - :install:software:git
      - :install:software:jq
      - :install:software:subrepo
    desc: Configure the the `origin`, `gitlab`, `github`, and `all` git remotes
    summary: |
      # Configure Git Remotes

      This task will set the origin to the GitLab repository associated with this project. It will then also create
      a remote named `all` which will point to both the GitLab repository and the GitHub mirror. You can then
      push to both repositories at the same time by running `git push all master`.

      **Example usage:**
      `task git:remotes`
    env:
      GITHUB_REPO:
        sh: jq -r '.blueprint.repository.github' package.json | sed 's/^https:\/\//git@/' | sed 's/github.com\//github.com:/'
      GITLAB_REPO:
        sh: jq -r '.blueprint.repository.gitlab' package.json | sed 's/^https:\/\//git@/' | sed 's/gitlab.com\//gitlab.com:/'
    run: once
    log:
      error: Error setting git remotes
      start: Setting up git remotes
      success: Git remotes are set up
    cmds:
      - git init -q
      - |
        if [ ! -z "$GITLAB_REPO" ]; then
          if git config remote.origin.url > /dev/null; then
            git remote set-url origin "${GITLAB_REPO}.git"
          else
            git remote add origin "${GITLAB_REPO}.git"
            .config/log success 'Added git remote named `origin`'
          fi
          if git config remote.gitlab.url > /dev/null; then
            git remote set-url gitlab "${GITLAB_REPO}.git"
          else
            git remote add gitlab "${GITLAB_REPO}.git"
            .config/log success 'Added git remote named `gitlab`'
          fi
        fi
      - |
        if [ ! -z "$GITHUB_REPO" ]; then
          if git config remote.github.url > /dev/null; then
            git remote set-url github "${GITHUB_REPO}.git"
          else
            git remote add github "${GITHUB_REPO}.git"
            .config/log success 'Added git remote named `github`'
          fi
        fi
      - |
        if [ ! -z "$GITLAB_REPO" ] && [ ! -z "$GITHUB_REPO" ]; then
          if git config remote.all.url > /dev/null; then
            git remote rm all
          fi
          git remote add all "${GITLAB_REPO}.git"
          git remote set-url --add --push all "${GITHUB_REPO}.git"
          git remote set-url --add --push all "${GITLAB_REPO}.git"
          .config/log success 'Added git remote named `all`'
        fi
    status:
      - '[[ "$(git config remote.all.url)" == "${GITLAB_REPO}.git" ]] || [ -n "$CI" ]'
      - '[[ "$(git config remote.github.url)" == "${GITHUB_REPO}.git" ]] || [ -n "$CI" ]'
      - '[[ "$(git config remote.gitlab.url)" == "${GITLAB_REPO}.git" ]] || [ -n "$CI" ]'
  git:remove:history:cli:
    deps:
      - :install:software:git
    log:
      error: Failed to remove `{{.CLI_ARGS}}` from the git history
      start: Removing `{{.CLI_ARGS}}` from the git history
      success: Removed `{{.CLI_ARGS}}` from the git history
    cmds:
      - git filter-branch --index-filter 'git rm -rf --cached --ignore-unmatch {{.CLI_ARGS}}' HEAD
  git:remove:submodules:
    deps:
      - :install:software:git
    desc: Remove all submodules in the current directory and optionally filter by RegEx
    summary: |
      # Remove submodules in current directory

      This task will remove all the submodules in the current directory and its' children.
      You can optionally specify RegEx to only remove submodules that match a particular pattern.
      Please note that this task is not _perfect_. You should commit your current changes before using it
      and then reset the repository with `git reset --hard HEAD` if anything pops up on `git status` that
      you do not like after running it.

      **Example removing all submodules that are children of the working directory:**
      `task git:remove-submodules`

      **Example removing all submodules that are children of the working directory and matching a pattern:**
      `task git:remove-submodules -- docs`
    vars:
      GITMODULES_PATH: .gitmodules
      REGEX_ARG:
        sh: if [ -z "{{.CLI_ARGS}}" ]; then echo ""; else echo " | grep {{.CLI_ARGS}}"; fi
      RELATIVE_PATH:
        sh: pwd | sed "s,^$(git rev-parse --show-toplevel),," | cut -c2-
      # /home/hawkwood/Downloads/Backup/Code
      ROOT_GIT:
        sh: git rev-parse --git-dir | sed 's/\.git\/modules\(.*\)/.gitmodules/' | sed 's/\.git$/.gitmodules/' | sed 's/.gitmodules$//'
      # /home/hawkwood/Downloads/Backup/Code/docker/ci-pipeline/hadolint
      TOP_LEVEL:
        sh: git rev-parse --show-toplevel
    log:
      error: Error encountered while attempting to remove submodules
      start: Attempting to remove submodules
      success: Successfully removed submodules
    cmds:
      - |
        if [ -f '.gitmodules' ]; then
          MODULE_PATHS=$(git config --file "{{.GITMODULES_PATH}}" --name-only --get-regexp "{{.RELATIVE_PATH}}" |
            sed 's/^submodule\.//' | grep "path$" | sed 's/\.path$//'{{.REGEX_ARG}})
          for MODULE_PATH in "$MODULE_PATHS"; do
            # https://github.com/a14m/gitsubmodule/blob/master/gitsubmodule
            git config -f '{{.GITMODULES_PATH}}' --remove-section "submodule.$MODULE_PATH" | true
            git add '{{.GITMODULES_PATH}}'
            # /home/hawkwood/Downloads/Backup/Code/.git/modules/docker/ci-pipeline/hadolint/config
            {{if .ROOT_GIT}}
              CONFIG_PATH="$(pwd | sed 's,{{.ROOT_GIT}},,')"
            {{else}}
              CONFIG_PATH='.git'
            {{end}}
            git config -f '{{.ROOT_GIT}}./{{if ne .ROOT_GIT ""}}.git/modules/{{end}}'"$CONFIG_PATH"'/config' --remove-section "submodule.$MODULE_PATH"
            git rm --cached "$MODULE_PATH"
            rm -rf "{{.ROOT_GIT}}./.git/modules/$CONFIG_PATH"
            rm -rf "$MODULE_PATH"
          done
          .config/log success "Successfully removed the project's submodules"
        else
          .config/log info 'This task does not run unless there is a `.gitmodules` file in the current directory'
        fi

  git:update:
    run: once
    cmds:
      - task: :git:gitlab:create
      - task: :git:github:create
      - task: update:continue
    status:
      - '[ -n "$CI" ] || ([ -z "$GITLAB_TOKEN" ] && [ -z "$GITHUB_TOKEN" ])'
  git:update:continue:
    deps:
      - :git:gitlab:update
      - :git:github:update
    run: once
  # ##############################################################################
  #
  # ##############################################################################
  issues:exportall:
    deps:
      - exportall:github
      - exportall:gitlab
  issues:exportall:github:
    vars:
      SLUG:
        sh: jq -r '.blueprint.slug' package.json
    env:
      GH_CURL_AUTH:
        sh: |
          echo "Authorization: token $GITHUB_TOKEN"
    cmds:
      - git issue exportall github {{.GITHUB_ORG}} {{.SLUG}}
    status:
      - '[ -z "$GITHUB_TOKEN" ]'
  issues:exportall:gitlab:
    vars:
      GITLAB_PATH:
        sh: jq -r '.blueprint.repository.gitlab' package.json | sed 's/https:\/\/gitlab.com\///' | sed 's/\/[^\/]*$//' | sed 's/\//%2F/g'
      GITLAB_SLUG:
        sh: jq -r '.blueprint.repository.gitlab' package.json | sed 's/.*\/\([^\/]*\)$/\1/'
    env:
      GL_CURL_AUTH:
        sh: |
          echo "PRIVATE-TOKEN: $GITLAB_TOKEN"
    cmds:
      - git issue exportall gitlab {{.GITLAB_PATH}} {{.GITLAB_SLUG}}
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
  issues:import:
    deps:
      - import:github
      - import:gitlab
  issues:import:github:
    vars:
      SLUG:
        sh: jq -r '.blueprint.slug' package.json
    env:
      GH_CURL_AUTH:
        sh: |
          echo "Authorization: token $GITHUB_TOKEN"
    cmds:
      - git issue import github {{.GITHUB_ORG}} {{.SLUG}}
    status:
      - '[ -z "$GITHUB_TOKEN" ]'
  issues:import:gitlab:
    vars:
      GITLAB_PATH:
        sh: jq -r '.blueprint.repository.gitlab' package.json | sed 's/https:\/\/gitlab.com\///' | sed 's/\/[^\/]*$//' | sed 's/\//%2F/g'
      GITLAB_SLUG:
        sh: jq -r '.blueprint.repository.gitlab' package.json | sed 's/.*\/\([^\/]*\)$/\1/'
    env:
      GL_CURL_AUTH:
        sh: |
          echo "PRIVATE-TOKEN: $GITLAB_TOKEN"
    cmds:
      - git issue import gitlab {{.GITLAB_PATH}} {{.GITLAB_SLUG}}
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
  issues:init:
    cmds:
      - cmd: git issue init
        ignore_error: true
  issues:synchronize:
    deps:
      - :install:software:git-issue:admin
    cmds:
      - task: init
      - task: import
      - task: exportall
  # ##############################################################################
  #
  # ##############################################################################
  hook:commit-msg:
    deps:
      - :lint:commit
    log:
      error: '`commit-msg` hook encountered an error!'
      start: '`commit-msg` hook running..'
  hook:post-checkout:
    deps:
      - :install:npm:git-notify
      - :install:npm:yarnhook
    log:
      error: '`post-checkout` hook encountered an error!'
      start: '`post-checkout` hook running..'
    cmds:
      - git-notify checkout --prefix "@notify" --color "{{.GIT_NOTIFY_COLOR}}" "$GIT_PARAMS"
      - yarnhook
  hook:post-commit:
    log:
      error: '`post-commit` hook encountered an error!'
      start: '`post-commit` hook running..'
    cmds:
      - 'true'
  hook:post-merge:
    deps:
      - :install:npm:git-notify
      - :install:npm:yarnhook
    log:
      error: '`post-merge` hook encountered an error!'
      start: '`post-merge` hook running..'
    cmds:
      - git-notify merge --prefix "@notify" --color "{{.GIT_NOTIFY_COLOR}}" "$GIT_PARAMS"
      - yarnhook
  hook:post-rewrite:
    deps:
      - :install:npm:git-notify
      - :install:npm:yarnhook
    log:
      error: '`post-rewrite` hook encountered an error!'
      start: '`post-rewrite` hook running..'
    cmds:
      - git-notify rewrite --prefix "@notify" --color "{{.GIT_NOTIFY_COLOR}}" "$GIT_PARAMS"
      - yarnhook
  hook:pre-commit:
    deps:
      - :fix:json
      - :fix:misc
      - :security:gitleaks
      - :security:private-keys
    log:
      error: '`pre-commit` hook encountered an error!'
      start: '`pre-commit` hook running..'
  hook:pre-push:
    vars:
      GITHUB_TOKEN:
        sh: echo "$GITHUB_TOKEN"
      GITLAB_TOKEN:
        sh: echo "$GITLAB_TOKEN"
    log:
      error: '`pre-push` hook encountered an error!'
      start: '`pre-push` hook running..'
    cmds:
      - |
        REMOTE={{index (split " " (trimAll "'" .CLI_ARGS)) "_0"}}
        URL={{index (split " " (trimAll "'" .CLI_ARGS)) "_1" | replace .GITLAB_TOKEN "" | replace .GITHUB_TOKEN ""}}
        if [[ $URL == http* ]]; then
          URL="$(echo $URL | sed 's/^[^@]*@/git@/')"
        fi
        HOST="$(echo $URL | sed 's/^.*@//' | sed 's/:.*$//')"
        ORG="$(echo $URL | sed 's/^.*://' | sed 's/\/.*$//')"
        PROJECT="$(echo $URL | sed 's/^[^\/]*\///' | sed 's/.[^\.]*$//')"
        IFS=' '
        while read local_ref local_sha remote_ref remote_sha; do
          # local_ref -> refs/heads/master
          # local_sha -> b14959a077c9b6ced19c29d5ba9c75ddbad5d3ea
          # remote_ref -> refs/heads/master
          # remote_sha -> 9901a2eb2f34d5744276a80c4b339a88a92a7b53
          REMOTE_BRANCH="$(echo $remote_ref | sed 's/^[^\/]*\/[^\/]*\///')"
          .config/log star "Repository -----> \`https://$HOST/$ORG/$PROJECT\`"
          if [ "$HOST" == 'gitlab.com' ]; then
            if [ "$REMOTE_BRANCH" != 'master' ]; then
              .config/log star "Open PR --------> \`https://$HOST/$ORG/$PROJECT/-/merge_requests/new\`"
            fi
            .config/log star "View commit ----> \`https://$HOST/$ORG/$PROJECT/-/commit/$local_sha\`"
          elif [ "$HOST" == 'github.com' ]; then
            if [ "$REMOTE_BRANCH" != 'master' ]; then
              .config/log star "Open PR --------> \`https://$HOST/$ORG/$PROJECT/pull/new/$REMOTE_BRANCH\`"
            fi
            .config/log star "View commit ----> \`https://$HOST/$ORG/$PROJECT/commit/$local_sha\`"
          fi
        done




  # ##############################################################################
  #
  # ##############################################################################
  gitomatic:key:generate:
    cmds:
      - ssh-keygen -t ecdsa -b 521 -C "$GITLAB_EMAIL" -f ~/.ssh/id_ecdsa_gitomatic -P ""
  gitomatic:sync:
    deps:
      - :install:go:gitomatic
    cmds:
      - gitomatic -privkey ~/.ssh/id_ecdsa_gitomatic -interval 14m -pull=true -push=true -author "gitomatic sync" -email "gitomatic@megabyte.space" ./
  # ##############################################################################
  #
  # ##############################################################################
  bug:bridge:
    deps:
      - bridge:github
      - bridge:gitlab

    run: once
  bug:bridge:github:
    deps:
      - :install:software:git-bug
    run: once
    cmds:
      - git bug bridge configure --name="$(jq -r '.name' package.json)" --target=github
        --url="$(jq -r '.blueprint.repository.github' package.json)" --token="$GITHUB_TOKEN"
    status:
      - '[ -z "$GITHUB_TOKEN" ]'
  bug:bridge:gitlab:
    deps:
      - :install:software:git-bug
    run: once
    cmds:
      - git bug bridge configure --name="$(jq -r '.name' package.json)" --target=gitlab
        --url="$(jq -r '.blueprint.repository.gitlab' package.json)" --token="$GITLAB_TOKEN" --base-url=https://gitlab.com/
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
  bug:pull:
    deps:
      - bridge
      - :git:remotes
      - :install:software:git-bug
    cmds:
      - git bug pull all
  bug:push:
    deps:
      - bridge
      - :git:remotes
      - :install:software:git-bug
    cmds:
      - git bug push all
  bug:webui:
    deps:
      - bridge
      - pull
      - :install:software:git-bug
    cmds:
      - git bug webui
  # ##############################################################################
  #
  # ##############################################################################
  github:create:
    deps:
      - :ci:commit:config
      - :install:software:gh
      - :install:software:jq
      - :git:remotes
    vars:
      DESCRIPTION:
        sh: jq -r '.description' package.json
      GITHUB_SLUG:
        sh: jq -r '.blueprint.repository.github' package.json | sed 's/.*\///'
      HOMEPAGE:
        sh: jq -r '.homepage' package.json
      PROJECT_TYPE:
        sh: if [[ $(jq -r '.private' package.json) == 'true' ]]; then echo '--private'; else echo '--public'; fi
    run: once
    log:
      error: Error while ensuring GitHub repository exists
      start: Checking for presence of GitHub repository and creating one if it does not exist
      success: Ensure GitHub repository is present
    cmds:
      - cmd: gh repo create "{{.GITHUB_ORG}}/{{.GITHUB_SLUG}}" --enable-wiki={{.GITHUB_WIKI}} -y --description "{{.EMOJI_START}}{{.DESCRIPTION}}{{.EMOJI_END}}"
          --homepage "{{.HOMEPAGE}}" {{.PROJECT_TYPE}} > /dev/null
        ignore_error: true
      - |
        task --list > /dev/null || (echo "ERROR: Invalid Taskfiles!" && exit 1)
        git add --all
      - git commit --quiet -m "✨ feat(birth): Birth" -n || true
      - git push github master
    status:
      - '[ -z "$GITHUB_TOKEN" ] || ! test -e .git || gh repo view {{.GITHUB_ORG}}/{{.GITHUB_SLUG}} > /dev/null'
    preconditions:
      - sh: '[ "{{.DESCRIPTION}}" != "null" ]'
        msg: The `.description` in `package.json` must be set.
      - sh: '[ "{{.GITHUB_SLUG}}" != "null" ]'
        msg: The `.name` in `package.json` must be set.
      - sh: '[ "{{.HOMEPAGE}}" != "null" ]'
        msg: The `.homepage` in `package.json` must be set.
  github:ids:
    deps:
      - :install:software:gh
      - :install:software:jq
      - create
    vars:
      CURRENT_PROJECT_ID:
        sh: jq -r '.blueprint.github_id' package.json
      PROJECT_ID:
        sh: gh repo view --json id | jq -r '.id'
    log:
      error: Failed to add GitHub project ID to package.json
      start: Saving GitHub project ID to package.json
      success: Added GitHub project ID to package.json
    cmds:
      - TMP="$(mktemp)" && jq --arg projectId "{{.PROJECT_ID}}" '.blueprint.github_id = $projectId' package.json > "$TMP" && mv "$TMP" package.json
    status:
      - '[[ "{{.CURRENT_PROJECT_ID}}" == "{{.PROJECT_ID}}" ]]'
  github:update:
    run: once
    cmds:
      - task: update:deps
    status:
      - '[ -z "$GITHUB_TOKEN" ]'
  github:update:deps:
    deps:
      - update:meta
      - ids
      - variables
  github:update:meta:
    deps:
      - :install:software:gh
      - :install:software:jq
      - create
    vars:
      DESCRIPTION:
        sh: jq -r '.description' package.json
      GITHUB_SLUG:
        sh: jq -r '.blueprint.repository.github' package.json | sed 's/.*\///'
      HOMEPAGE:
        sh: jq -r '.homepage' package.json
      PRIVATE:
        sh: jq -r '.private' package.json | sed 's/null/false/'
    log:
      error: Error while updating GitHub repository metadata
      start: Updating GitHub project metadata
      success: Updated GitHub repository metadata
    cmds:
      - |
        OPTIONAL_TAGS="$(jq '.keywords' .config/common-keywords.json)"
        TOPICS="$(jq '.keywords' package.json | sed 's/null/[]/')"
        TOPICS_LENGTH="$(jq -r '.keywords | length' package.json)"
        if [ ! -z "$GITHUB_TOKEN" ]; then
          gh api -X PATCH repos/{{.GITHUB_ORG}}/{{.GITHUB_SLUG}} -f description="{{.EMOJI_START}}{{.DESCRIPTION}}{{.EMOJI_END}}" -f homepage="{{.HOMEPAGE}}" \
            -f has_issues={{.GITHUB_ISSUES}} -f has_wiki={{.GITHUB_WIKI}} -f private="{{.PRIVATE}}" --silent
          .config/log success 'Ensured GitHub metadata is up-to-date'
          RESULT="$TOPICS"
          if [ "$TOPICS_LENGTH" -gt 20 ]; then
            function updateList() {
              REMOVE_KEY="$(jq -n --argjson optional "$OPTIONAL_TAGS" '$optional['"$1"']')"
              RESULT="$(jq -n --argjson remove "$REMOVE_KEY" --argjson jq "$RESULT" '$jq | del(.[] | select(. == $remove))')"
            }
            LOOP_COUNT="$((TOPICS_LENGTH-20))"
            for i in $(seq "$LOOP_COUNT"); do
              updateList "$i"
            done
          fi
          MINIMIZED_TOPICS="$(jq -n --argjson tags "$RESULT" '$tags | .[]' | xargs | sed 's/ /","/g' | sed 's/^/"/' | sed 's/$/"/')"
          if [[ "$MINIMIZED_TOPICS" != '""' ]]; then
            curl -s -X PUT -H "Accept: application/vnd.github.mercy-preview+json" -u "{{.GITHUB_ORG}}:$GITHUB_TOKEN" \
              'https://api.github.com/repos/{{.GITHUB_ORG}}/{{.GITHUB_SLUG}}/topics' -d '{"names":['"$MINIMIZED_TOPICS"']}' > /dev/null
            .config/log success 'Updated GitHub topics successfully'
          fi
        else
          .config/log warn 'The `GITHUB_TOKEN` environment variable is not set so the GitHub repository cannot be updated via the API.'
        fi
    sources:
      - .config/common-keywords.json
      - .variables.json
      - package.json
    preconditions:
      - sh: '[ "{{.DESCRIPTION}}" != "null" ]'
        msg: The `.description` in `package.json` must be set.
      - sh: '[ "{{.HOMEPAGE}}" != "null" ]'
        msg: The `.homepage` in `package.json` must be set.
  github:variables:
    deps:
      - :install:software:gh
      - create
    log:
      error: Error setting GitHub Actions Ansible Galaxy token
      start: Setting GitHub Actions Ansible Galaxy token
      success: GitHub Actions Ansible Galaxy token set
    cmds:
      - gh secret set ANSIBLE_GALAXY_TOKEN -b "$ANSIBLE_GALAXY_TOKEN"
    status:
      - '[ -z "$GITHUB_TOKEN" ] || [ -z "$ANSIBLE_GALAXY_TOKEN" ] || [ "{{.REPOSITORY_TYPE}}" != "ansible" ]'
  # ##############################################################################
  #  GitLab
  # ##############################################################################
  gitlab:access-token:
    deps:
      - :install:software:glab
      - :install:software:jq
      - create
    vars:
      REPO_ID:
        sh: glab api projects/:fullpath | jq '.id'
      REQUEST_DATA: '{ "name":"PROJECT_CI_ACCESS_TOKEN", "scopes":["write_repository", "read_repository"] }'
      TOKEN_STATUS:
        sh: type glab > /dev/null && glab api projects/:fullpath/access_tokens | jq -r '.[] | select(.name=="PROJECT_CI_ACCESS_TOKENX") | .id' || true
    run: once
    log:
      error: Failed to configure project-specific access token
      start: Configuring project-specific access token
      success: Configured project-specific access token
    cmds:
      - |
        curl -sSL --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" --header \
        'Content-Type:application/json' --data '{{.REQUEST_DATA}}' \
        'https://gitlab.com/api/v4/projects/{{.REPO_ID}}/access_tokens' > /dev/null
    status:
      - '[ -n "{{.TOKEN_STATUS}}" ] || ! glab api projects/:fullpath/access_tokens'
  gitlab:branches:
    deps:
      - :install:software:glab
      - create
    vars:
      REPO_ID:
        sh: glab api projects/:fullpath | jq '.id'
    run: once
    log:
      error: Error encountered while setting up protected branches
      start: Setting up protected branches
      success: Set up protected branches
    cmds:
      - |
        glab api projects/:fullpath/protected_branches -X POST -f name=master -f code_owner_approval_required=true &> /dev/null &
        glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=main -f ref=master &> /dev/null &
        glab api projects/:fullpath/protected_branches -X POST -f name=main -f code_owner_approval_required=true &> /dev/null &
        glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=next -f ref=master &> /dev/null &
        glab api projects/:fullpath/protected_branches -X POST -f name=next -f code_owner_approval_required=true &> /dev/null &
        glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=alpha -f ref=master &> /dev/null &
        glab api projects/:fullpath/protected_branches -X POST -f name=alpha -f code_owner_approval_required=true &> /dev/null &
        glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=beta -f ref=master &> /dev/null &
        glab api projects/:fullpath/protected_branches -X POST -f name=beta -f code_owner_approval_required=true &> /dev/null &
        glab api projects/:fullpath/protected_branches -X POST -f name=protected/* -f code_owner_approval_required=true &> /dev/null &
        glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=synchronize -f ref=master &> /dev/null &
        glab api projects/:fullpath/protected_branches -X POST -f name=synchronize -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
        if [[ '{{.REPOSITORY_TYPE}}' == 'ansible' ]]; then
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=test/linux -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=test/linux \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=test/darwin -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=test/darwin \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=test/windows -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=test/windows \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
        fi
        if [[ '{{.REPOSITORY_TYPE}}' == 'packer' ]]; then
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=hyperv -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=hyperv \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=kvm -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=kvm \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=parallels -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=parallels \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=virtualbox -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=virtualbox \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
          glab api projects/:fullpath/repository/branches -X POST -f id={{.REPO_ID}} -f branch=vmware -f ref=master &> /dev/null &
          glab api projects/:fullpath/protected_branches -X POST -f name=vmware \
            -f code_owner_approval_required=true -f allow_force_push=true &> /dev/null &
        fi
        wait

  gitlab:create:
    deps:
      - :install:software:glab
      - :install:software:jq
      - :git:remotes
    vars:
      DESCRIPTION:
        sh: jq -r '.description' package.json
      GITLAB_GROUP:
        sh: jq -r '.blueprint.repository.gitlab' package.json | sed 's/https:\/\/gitlab.com\///' | sed 's!/[^/]*$!!'
      GITLAB_PATH:
        sh: jq -r '.blueprint.repository.gitlab' package.json | sed 's/https:\/\/gitlab.com\///'
      NAME:
        sh: jq -r '.blueprint.name' package.json
      PROJECT_TYPE:
        sh: if [[ $(jq -r '.private' package.json) == 'true' ]]; then echo '--private'; else echo '--public'; fi
      TMP:
        sh: mktemp
    run: once
    log:
      error: Encountered error while creating GitLab repository
      start: Ensuring GitLab repository has been created
      success: Ensured GitLab repository exists
    cmds:
      - cmd: |
          NO_PROMPT=1 glab repo create '{{.GITLAB_PATH}}' --group '{{.GITLAB_GROUP}}' \
          --description '{{.EMOJI_START}}{{.DESCRIPTION}}{{.EMOJI_END}}' --name '{{.NAME}}' \
          {{.PROJECT_TYPE}} --tag "$(jq -r '.keywords | tostring' package.json | sed 's/\[//' | sed 's/\]//')"
          task --list > /dev/null || (echo "ERROR: Invalid Taskfiles!" && exit 1)
          git add --all
          HUSKY=0 git commit --quiet -m "🎂 Birth" -n || true
          git push gitlab master
        ignore_error: true
    status:
      - '[ -z "$GITLAB_TOKEN" ] || (test -d .git && glab repo view "{{.GITLAB_PATH}}" > /dev/null)'
    preconditions:
      - sh: '[ "{{.DESCRIPTION}}" != "null" ]'
        msg: The `.description` in `package.json` must be set.
      - sh: '[ "{{.NAME}}" != "null" ]'
        msg: The `.blueprint.name` variable in `package.json` must be set.
  gitlab:group:exec:
    cmds:
      - task: group:exec:{{if .CLI_ARGS}}cli{{else}}prompt{{end}}
  gitlab:group:exec:cli:
    log:
      error: Failed to run group:exec logic
      start: Running group:exec logic
      success: Successfully ran group:exec logic
    cmds:
      - task git:gitlab:group:repositories -- {{index (splitList " ---- " .CLI_ARGS) 0}}
      - |
        BASE_PWD="$PWD"
        function execRepo() {
          REPO_DETAILS="$1"
          REPO_URL="$(echo "$REPO_DETAILS" | sed 's/   .*$//')"
          REPO_PATH="$(echo "$REPO_DETAILS" | sed 's/^.*   //')"
          DIR_NAME="$(dirname "$REPO_PATH")"
          mkdir -p "$DIR_NAME"
          if [ -d "$REPO_PATH" ]; then
            cd "$REPO_PATH"
            git pull origin master || continue
            cd "$BASE_PWD"
          else
            git clone "$REPO_URL" "$REPO_PATH"
          fi
          .config/log info "Running bash command on $REPO_PATH"
          (
            cd "$REPO_PATH"
            {{trimPrefix "'" (trimSuffix "'" (index (splitList " ---- " .CLI_ARGS) 1))}}
            cd "$BASE_PWD"
          )
          .config/log success "Finished running bash command on $REPO_PATH"
        }
        cat {{.REPOSITORY_LIST}} | (while IFS= read -r REPO_DETAILS; do
          .config/log info "Executing logic on $REPO_DETAILS"
          execRepo "$REPO_DETAILS"{{if eq .GROUP_EXEC_ASYNC "true"}} &{{end}}
        done{{if eq .GROUP_EXEC_ASYNC "true"}}
        wait){{else}}){{end}}

  gitlab:group:exec:prompt:
    interactive: true
    cmds:
      - mkdir -p .cache
      - node .config/scripts/prompts/gitlab-group.js
  gitlab:group:repositories:
    deps:
      - :install:software:glab
      - :install:software:jq
    summary: |
      # Return repositories belonging to group and sub-groups

      Given a GitLab group path (which can include subgroups as well), this task will cycle through
      the group and its' subgroups and generate a list of repositories. The repositories are
      saved to a file located at `{{.REPOSITORY_LIST}}`.

      **Example specifying a group and subgroup:**
      `task {{.TASK}} -- megabyte-labs/ansible-roles`
    log:
      error: Encountered error while generating a list of repositories
      start: Generating list of repositories
      success: List of repositories generated
    cmds:
      - mkdir -p .cache
      - rm -f {{.REPOSITORY_LIST}}
      - task: group:repositories:loop
  gitlab:group:repositories:loop:
    cmds:
      - glab api "groups/{{urlquery .CLI_ARGS}}" | jq -r '.projects[] | .ssh_url_to_repo + "   " + .path_with_namespace' >> {{.REPOSITORY_LIST}}
      - |
        .config/log info 'Recursively acquiring repository details from subgroups'
        SUBGROUPS="$(glab api groups/{{urlquery .CLI_ARGS}}/subgroups | jq -r '.[] | .full_path')"
        if [ -n "$SUBGROUPS" ]; then
          echo "$SUBGROUPS" | (while IFS= read -r SUBGROUP; do
            task {{.TASK}} -- "$SUBGROUP" &
          done
          wait)
        fi

  gitlab:ids:
    deps:
      - :install:software:glab
      - :install:software:jq
      - create
    log:
      error: Error acquiring GitLab project and group IDs
      start: Acquiring GitLab project and group IDs
      success: Saved GitLab project and group IDs to package.json
    cmds:
      - |
        API_RES="$(glab api projects/:fullpath)"
        PROJECT_ID="$(echo "$API_RES" | jq '.id')"
        TMP="$(mktemp)" && jq --arg projectId "$PROJECT_ID" '.blueprint.gitlab_project_id = $projectId' package.json > "$TMP"
        mv "$TMP" package.json
        GROUP_ID="$(echo "$API_RES" | jq '.namespace.id')"
        TMP_GROUP="$(mktemp)" && jq --arg groupId "$GROUP_ID" '.blueprint.gitlab_group_id = $groupId' package.json > "$TMP_GROUP"
        mv "$TMP_GROUP" package.json

  gitlab:integrations:
    deps:
      - create
    run: once
    cmds:
      - task: integrations:github
  gitlab:integrations:github:
    deps:
      - :install:software:glab
      - :install:software:jq
    log:
      error: Error enabling GitLab's GitHub integration
      start: Ensuring GitLab's GitHub integration is enabled
      success: GitLab's GitHub integration is enabled
    cmds:
      - glab api projects/:fullpath/integrations/github -X PUT -f token="$GITHUB_TOKEN"
        -f repository_url="$(jq -r '.blueprint.repository.github' package.json)" --silent
    status:
      - '[ -z "$GITLAB_TOKEN" ] || [ -z $GITHUB_TOKEN ]'
  gitlab:mirror:
    deps:
      - :install:software:glab
      - :install:software:jq
      - :git:github:create
      - create
    vars:
      GITHUB_SLUG:
        sh: jq -r '.blueprint.repository.github' package.json | sed 's/.*\///'
      GITLAB_REPO_ID:
        sh: glab api projects/:fullpath | jq -r '.id'
      PUSH_MIRROR_COUNT:
        sh: glab api projects/:fullpath/remote_mirrors | jq '. | length'
    log:
      error: Error ensuring push/pull mirroring is enabled between GitLab and GitHub
      start: Ensuring push/pull mirroring from GitLab to GitHub is set up
      success: Push and pull mirroring from GitLab to GitHub are enabled
    cmds:
      - |
        if [[ "{{.PUSH_MIRROR_COUNT}}" == '0' ]]; then
          glab api projects/:fullpath/remote_mirrors --method POST --header "Content-Type: application/json" \
            -f "url=https://{{.GITHUB_USER}}:$GITHUB_TOKEN@github.com/{{.GITHUB_ORG}}/{{.GITHUB_SLUG}}.git" \
            -f 'enabled=true' > /dev/null
          .config/log success 'Successfully set up push mirroring from GitLab to GitHub'
        fi
      - >
        curl -s -H 'Content-Type: application/json' -H "Authorization: Bearer $GITLAB_TOKEN" -X PUT --data
        "{\"mirror\": true, \"import_url\": \"https://{{.GITHUB_USER}}:$GITHUB_TOKEN@github.com/{{.GITHUB_ORG}}/{{.GITHUB_SLUG}}.git\"}"
        'https://gitlab.com/api/v4/projects/{{.GITLAB_REPO_ID}}' > /dev/null
    status:
      - '[ -z "$GITLAB_TOKEN ] || [ -z "GITHUB_TOKEN ]'
  gitlab:pipelines:
    deps:
      - :install:software:glab
      - :install:software:jq
      - create
    vars:
      PIPELINE_COUNT:
        sh: jq -r '.gitlab_pipelines | length' .variables.json
    log:
      error: Error setting up GitLab pipelines
      start: Ensuring GitLab pipelines are set up according to the configuration
      success: GitLab pipelines are set up
    cmds:
      - |
        PIPELINES="$(jq -r '.gitlab_pipelines' .variables.json)"
        PIPELINE_RES="$(glab api projects/:fullpath/pipeline_schedules)"
        for INDEX in {1..{{.PIPELINE_COUNT}}}; do
          PIPELINE_INDEX="$((INDEX - 1))"
          ACTIVE="$(echo "$PIPELINES" | jq -r --arg i "$PIPELINE_INDEX" '.[$i | tonumber].active')"
          CRON="$(echo "$PIPELINES" | jq -r --arg i "$PIPELINE_INDEX" '.[$i | tonumber].cron' | sed 's/"//g')"
          DESC="$(echo "$PIPELINES" | jq -r --arg i "$PIPELINE_INDEX" '.[$i | tonumber].description')"
          REF="$(echo "$PIPELINES" | jq -r --arg i "$PIPELINE_INDEX" '.[$i | tonumber].ref')"
          if (! echo "$PIPELINE_RES" | grep "$DESC") > /dev/null; then
            glab api projects/:fullpath/pipeline_schedules -X POST -f active="$ACTIVE" -f description="$DESC" -f ref="$REF" \
              -f cron="$CRON" -f cron_timezone='{{.TIMEZONE}}' --silent
            if [ "$DESC" != 'null' ]; then .config/log success "Pipeline with description of '${DESC}' successfully added"; fi
          else
            if [ "$DESC" != 'null' ]; then .config/log info "Pipeline with description of '${DESC}' already added"; fi
          fi
        done
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
  gitlab:pipelines:clear:
    deps:
      - create
    log:
      error: Error clearing GitLab pipelines
      start: Clearing GitLab pipelines
      success: Cleared GitLab pipelines
    cmds:
      - |
        TMP="$(mktemp)"
        glab api projects/:id/pipeline_schedules -X GET > "$TMP"
        for PIPELINE_ID in $(jq -r '.[].id' "$TMP"); do
          glab api projects/:fullpath/pipeline_schedules/"$PIPELINE_ID" -X DELETE
        done
    preconditions:
      - sh: '[ ! -z "$GITLAB_TOKEN" ]'
        msg: The `GITLAB_TOKEN` environment variable must be set to run this task
  gitlab:protected:off:
    deps:
      - :install:software:glab
    vars:
      BRANCH: '{{if .BRANCH}}{{.BRANCH}}{{else}}{{.CLI_ARGS}}{{end}}'
    todo: figure out how to do it without deleteing the protection first
    cmds:
      - glab api projects/:fullpath/protected_branches/{{.BRANCH}} -X DELETE
      - glab api projects/:fullpath/protected_branches -X POST -f name={{.BRANCH}} -f allow_force_push=true > /dev/null
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
  gitlab:protected:on:
    deps:
      - :install:software:glab
    vars:
      BRANCH: '{{if .BRANCH}}{{.BRANCH}}{{else}}{{.CLI_ARGS}}{{end}}'
    todo: figure out how to do it without deleteing the protection first
    cmds:
      - glab api projects/:fullpath/protected_branches/{{.BRANCH}} -X DELETE
      - glab api projects/:fullpath/protected_branches -X POST -f name={{.BRANCH}} -f allow_force_push=false > /dev/null
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
  gitlab:update:
    run: once
    cmds:
      - task: update:deps
    status:
      - '[ -z "$GITLAB_TOKEN" ] || ! type glab &> /dev/null'
  gitlab:update:deps:
    deps:
      - access-token
      - branches
      - mirror
      - integrations
      - ids
      - pipelines
      - update:meta
      - wiki
  gitlab:update:meta:
    deps:
      - :install:software:glab
      - :install:software:jq
      - create
    vars:
      DESCRIPTION:
        sh: jq -r '.description' package.json
      ISSUES_TEMPLATE: '## Summary\r\n\r\n(Summarize the bug encountered concisely)\r\n\r\n##
        Steps to reproduce\r\n\r\n(How one can reproduce the issue - this is very important)\r\n\r\n##
        Example Project\r\n\r\n(If possible, please create an example project here on GitLab.com that
        exhibits the problematic\r\nbehavior, and link to it here in the bug report.\r\nIf you are using
        an older version of GitLab, this will also determine whether the bug has been fixed\r\nin a more
        recent version)\r\n\r\n## What is the current bug behavior?\r\n\r\n(What actually happens)\r\n\r\n##
        What is the expected correct behavior?\r\n\r\n(What you should see instead)\r\n\r\n## Relevant
        logs and/or screenshots\r\n\r\n(Paste any relevant logs - please use code blocks (```) to format
        console output, logs, and code, as\r\nit is very hard to read otherwise.)\r\n\r\n## Possible
        fixes\r\n\r\n(If you can, link to the line of code that might be responsible for the problem)'
      NAME:
        sh: jq -r '.blueprint.name' package.json
      PROJECT_TYPE:
        sh: if [[ $(jq -r '.private' package.json) == 'true' ]]; then echo 'private'; else echo 'public'; fi
      TEST_COVERAGE_REGEX:
        sh: jq -r '.build_coverage_regex' .variables.json | sed 's/^null$//'
    log:
      error: Error ensuring GitLab metadata is up-to-date
      start: Ensuring GitLab metadata is up-to-date
      success: GitLab metadata is up-to-date
    cmds:
      - |
        KEYWORDS="$(jq -r '.keywords | tostring' package.json | sed 's/\[//' | sed 's/\]//' | sed 's/"//g')"
        PROJECT_ID="$(glab api projects/:fullpath -X PUT -f build_coverage_regex="{{.TEST_COVERAGE_REGEX}}" \
        -f wiki_enabled={{.GITLAB_WIKI}} -f visibility="{{.PROJECT_TYPE}}" -f topics="$KEYWORDS" | jq '.id')"
        curl -s -H 'Content-Type: application/json' -H "Authorization: Bearer $GITLAB_TOKEN" -X PUT --data \
        '{"description": "{{.EMOJI_START}}{{.DESCRIPTION}}{{.EMOJI_END}}", "issues_template": "{{.ISSUES_TEMPLATE}}", "name": "{{.NAME}}"}' \
        "https://gitlab.com/api/v4/projects/$PROJECT_ID" > /dev/null
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
    preconditions:
      - sh: '[ "{{.DESCRIPTION}}" != "null" ]'
        msg: The `.description` in `package.json` must be set.
      - sh: '[ "{{.NAME}}" != "null" ]'
        msg: The `.blueprint.name` variable in `package.json` must be set.
  gitlab:wiki:
    deps:
      - :common:update:variables
      - :install:software:glab
      - :install:software:jq
      - create
    vars:
      DOCS_URL:
        sh: jq -r '.docs.link' .variables.json
    log:
      error: Failed to update GitLab wiki settings
      start: Setting GitLab wiki settings
      success: GitLab wiki settings are up-to-date
    cmds:
      - glab api projects/:fullpath/services/external-wiki -X PUT -f external_wiki_url="{{.DOCS_URL}}" --silent
    status:
      - '[ -z "$GITLAB_TOKEN" ]'
    preconditions:
      - sh: '[ "{{.DOCS_URL}}" != "null" ]'
        msg: The `.docs.link` variable in `.variables.json` must be set.
      - sh: '[ "{{.GROUP}}" != "null" ]'
        msg: The `.group` variable in `.variables.json` must be set.
